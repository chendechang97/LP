import os
import re
import shutil
import argparse

def extract_ports_content_text(source_file):
    """Extract the contents within the <PORTS> tag from the source ARXML file as text."""
    with open(source_file, 'r', encoding='utf-8') as file:
        content = file.read()
    
    match = re.search(r'<PORTS>(.*?)</PORTS>', content, re.DOTALL)
    if not match:
        raise ValueError(f"No <PORTS> tag found in the source file {source_file}.")
    
    return match.group(1)

def insert_ports_content_text(target_file, ports_content):
    """Insert the extracted <PORTS> contents into the target ARXML file."""
    with open(target_file, 'r', encoding='utf-8') as file:
        content = file.read()
    
    new_content, num_subs = re.subn(r'(<PORTS>).*?(</PORTS>)', rf'\1{ports_content}\2', content, flags=re.DOTALL)
    if num_subs == 0:
        raise ValueError(f"No <PORTS> tag found in the target file {target_file}.")
    
    with open(target_file, 'w', encoding='utf-8') as file:
        file.write(new_content)

def copy_ports_content_text(source_file, target_file):
    """Extract <PORTS> content from source_file and insert it into target_file."""
    ports_content = extract_ports_content_text(source_file)
    insert_ports_content_text(target_file, ports_content)

def process_folders(source_folder, target_folder):
    """Process all files in source_folder and replace <PORTS> content in corresponding files in target_folder."""
    for filename in os.listdir(source_folder):
        if filename.endswith('_component.arxml'):
            source_file = os.path.join(source_folder, filename)
            target_file = os.path.join(target_folder, filename)
            
            if os.path.exists(target_file):
                print(f"Processing source file: {source_file}")
                print(f"Processing target file: {target_file}")
                try:
                    copy_ports_content_text(source_file, target_file)
                    print(f"Successfully copied <PORTS> content from {source_file} to {target_file}")
                except ValueError as e:
                    print(f"Error processing files {source_file} and {target_file}: {e}")
            else:
                print(f"Target file {target_file} does not exist in the target folder. Skipping...")

def copy_filtered_files(swc_target_folder, swc_source_folder, arxml_folder):
    """Copy specific files from swc_target_folder and swc_source_folder to arxml_folder."""
    if not os.path.exists(arxml_folder):
        os.makedirs(arxml_folder)
    
    for filename in os.listdir(swc_target_folder):
        if filename not in ['SWC_Arch_datatype.arxml', 'SWC_Arch_interface.arxml']:
            source_file = os.path.join(swc_target_folder, filename)
            target_file = os.path.join(arxml_folder, filename)
            shutil.copy2(source_file, target_file)
            print(f"Copied {filename} from {swc_target_folder} to {arxml_folder}")
    
    for filename in ['SWC_Arch_datatype.arxml', 'SWC_Arch_interface.arxml']:
        source_file = os.path.join(swc_source_folder, filename)
        target_file = os.path.join(arxml_folder, filename)
        if os.path.exists(source_file):
            shutil.copy2(source_file, target_file)
            print(f"Copied {filename} from {swc_source_folder} to {arxml_folder}")
        else:
            print(f"{filename} does not exist in {swc_source_folder}")

def copy_bsw_files(bsw_source_folder, bsw_target_folder, cdd_folder):
    """Copy specific files from bsw_source_folder and bsw_target_folder to cdd_folder."""
    if not os.path.exists(cdd_folder):
        os.makedirs(cdd_folder)
    
    for filename in os.listdir(bsw_source_folder):
        if filename.endswith('_datatype.arxml'):
            source_file = os.path.join(bsw_source_folder, filename)
            target_file = os.path.join(cdd_folder, filename)
            shutil.copy2(source_file, target_file)
            print(f"Copied {filename} from {bsw_source_folder} to {cdd_folder}")
    
    for filename in os.listdir(bsw_target_folder):
        if filename.endswith('_component.arxml') or filename.endswith('_implementation.arxml'):
            source_file = os.path.join(bsw_target_folder, filename)
            target_file = os.path.join(cdd_folder, filename)
            shutil.copy2(source_file, target_file)
            print(f"Copied {filename} from {bsw_target_folder} to {cdd_folder}")

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description="Process ARXML files and copy specific files to designated folders.")
    parser.add_argument("--swc_source_folder", required=True, help="Path to SWC source folder")
    parser.add_argument("--swc_target_folder", required=True, help="Path to SWC target folder")
    parser.add_argument("--bsw_source_folder", required=True, help="Path to BSW source folder")
    parser.add_argument("--bsw_target_folder", required=True, help="Path to BSW target folder")
    parser.add_argument("--arxml_folder", required=True, help="Path to ARXML folder")
    parser.add_argument("--cdd_folder", required=True, help="Path to CDD folder")
    
    args = parser.parse_args()

    # 处理SWC文件夹
    print("Processing SWC folders...")
    process_folders(args.swc_source_folder, args.swc_target_folder)

    # 处理BSW文件夹
    print("Processing BSW folders...")
    process_folders(args.bsw_source_folder, args.bsw_target_folder)

    # 复制处理好的文件到arxml文件夹
    print("Copying filtered files to arxml folder...")
    copy_filtered_files(args.swc_target_folder, args.swc_source_folder, args.arxml_folder)

    # 复制指定BSW文件到cdd文件夹
    print("Copying BSW files to cdd folder...")
    copy_bsw_files(args.bsw_source_folder, args.bsw_target_folder, args.cdd_folder)
