import os
import re

def extract_ports_content_text(source_file):
    """Extract the contents within the <PORTS> tag from the source ARXML file as text."""
    with open(source_file, 'r', encoding='utf-8') as file:
        content = file.read()
    
    match = re.search(r'<PORTS>(.*?)</PORTS>', content, re.DOTALL)
    if not match:
        raise ValueError(f"No <PORTS> tag found in the source file {source_file}.")
    
    return match.group(1)

def insert_ports_content_text(target_file, ports_content):
    """Insert the extracted <PORTS> contents into the target ARXML file."""
    with open(target_file, 'r', encoding='utf-8') as file:
        content = file.read()
    
    new_content, num_subs = re.subn(r'(<PORTS>).*?(</PORTS>)', rf'\1{ports_content}\2', content, flags=re.DOTALL)
    if num_subs == 0:
        raise ValueError(f"No <PORTS> tag found in the target file {target_file}.")
    
    with open(target_file, 'w', encoding='utf-8') as file:
        file.write(new_content)

def copy_ports_content_text(source_file, target_file):
    """Extract <PORTS> content from source_file and insert it into target_file."""
    ports_content = extract_ports_content_text(source_file)
    insert_ports_content_text(target_file, ports_content)

def process_folders(source_folder, target_folder):
    """Process all files in source_folder and replace <PORTS> content in corresponding files in target_folder."""
    for filename in os.listdir(source_folder):
        if filename.endswith('_component.arxml'):
            source_file = os.path.join(source_folder, filename)
            target_file = os.path.join(target_folder, filename)
            
            if os.path.exists(target_file):
                print(f"Processing source file: {source_file}")
                print(f"Processing target file: {target_file}")
                try:
                    copy_ports_content_text(source_file, target_file)
                    print(f"Successfully copied <PORTS> content from {source_file} to {target_file}")
                except ValueError as e:
                    print(f"Error processing files {source_file} and {target_file}: {e}")
            else:
                print(f"Target file {target_file} does not exist in the target folder. Skipping...")

# 指定源文件夹和目标文件夹路径
source_folder = 'path/to/source_folder'
target_folder = 'path/to/target_folder'

# 执行处理
process_folders(source_folder, target_folder)
